import { Injectable } from '@nestjs/common';
import { Ctx, InjectBot, Message } from 'nestjs-telegraf';
import { Markup, Telegraf } from 'telegraf';

import { FirebaseService } from '../firebase/firebase.service';
import { Context } from './context.interface';
import { DocData } from '../firebase/docdata.interface';
import { QuickAuthService } from '../quick-auth/quick-auth.service';
import { QuickAuth } from '../quick-auth/quick-auth.interface';

@Injectable()
export class TelegramService {
	constructor(
		private readonly firebaseService: FirebaseService,
		@InjectBot() private readonly reSellerBot: Telegraf<Context>,
		private readonly quickAuthService: QuickAuthService,
	) {}

	async botStart(@Ctx() ctx: Context): Promise<any> {
		try {
			const user = await this.firebaseService.getDocByParams('users', {
				key: 'telegram',
				operator: '==',
				value: ctx.from.username,
			});

			if (user.error) {
				ctx.session.type = 'not_registered';

				return await ctx.replyWithHTML(
					`<i><b>–í—ã</b> <b>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>. –í—ã –º–æ–∂–µ—Ç–µ <b>—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>, <b>–∫–ª–∏–∫–Ω—É–≤</b> –ø–æ –∫–Ω–æ–ø–∫–µ "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ"\n\n<b>–ú–æ–∂–µ—Ç–µ</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –ø–æ <a href='${process.env.SITE_BASE_URL}/registration'>–°—Å—ã–ª–∫–µ</a>, –ø–æ—Å–ª–µ <b>–∫–ª–∏–∫–Ω–∏—Ç–µ</b> –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚è≥"</i>`,
					Markup.keyboard(['–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚è≥'], {
						columns: 2,
					}),
				);
			}

			const data = {
				id: user.data['id'],
				telegramId: ctx.from.id,
				interface: 'users',
			};

			const upd = await this.firebaseService.updateDoc(
				data as DocData,
				'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
			);

			if (user.data['verification']['verified']) {
				ctx.session.type = 'none';

				return await ctx.replyWithHTML(
					`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${user.data['name']}</b>`,
					Markup.keyboard(
						['–ê–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå', '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üîó'],
						{ columns: 2 },
					),
				);
			}

			ctx.session.type = 'verification';

			return await ctx.replyWithHTML(
				`üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${user.data['name']}</b>\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞`,
			);
		} catch {
			return ctx.replyWithHTML(
				'<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ‚ùå</b>\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ',
			);
		}
	}

	async textHandler(
		@Message('text') message: string,
		@Ctx() ctx: Context,
	): Promise<any> {
		try {
			if (ctx.session.type === 'none' || ctx.session.type === 'not_registered')
				return await ctx.deleteMessage();

			if (ctx.session.type === 'verification') {
				const user = await this.firebaseService.getDocByParams('users', {
					key: 'telegram',
					operator: '==',
					value: ctx.from.username,
				});

				const code = user.data['verification']['verificationCode'];

				if (code !== message) {
					return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
				}

				const data = {
					id: user.data['id'],
					verification: {
						verified: true,
					},
					interface: 'users',
				};

				const upd = await this.firebaseService.updateDoc(
					data as any,
					'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
				);

				ctx.session.type = 'none';

				await ctx.deleteMessage();

				return await ctx.replyWithHTML(
					'<b>üçª –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>',
					Markup.keyboard(
						['–ê–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå', '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üîó'],
						{ columns: 2 },
					),
				);
			}

			if (ctx.session.type === 'registration') {
				ctx.session.name = message;

				await ctx.deleteMessage();

				ctx.session.type = 'registration-login';

				return await ctx.replyWithHTML('<i>ü™™ –í–≤–µ–¥–∏—Ç–µ <b>–ª–æ–≥–∏–Ω</b></i>');
			}

			if (ctx.session.type === 'registration-login') {
				const user = await this.firebaseService.getDocByParams('users', {
					key: 'login',
					operator: '==',
					value: message,
				});

				if (user.error) {
					ctx.session.login = message;

					ctx.session.type = 'registration-password';

					await ctx.deleteMessage();

					return await ctx.replyWithHTML('<i>üîê –í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b></i>');
				}

				await ctx.deleteMessage();

				return await ctx.replyWithHTML(
					`<i>‚ÑπÔ∏è –õ–æ–≥–∏–Ω <b>${message}</b> —É–∂–µ –∑–∞–Ω—è—Ç</i>`,
				);
			}

			if (ctx.session.type === 'registration-password') {
				ctx.session.password = message;

				await ctx.deleteMessage();

				const data = {
					name: ctx.session.name,
					login: ctx.session.login,
					password: ctx.session.password,
					telegram: ctx.from.username,
					telegramId: ctx.from.id,
					verification: {
						verified: true,
					},
					balance: 300000,
					products: [],
					orders: [],
					buys: [],
					interface: 'users',
				};

				const user = await this.firebaseService.createDoc(
					data as any,
					'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
				);

				const link = await this.quickAuthService.createAuthLink({
					to: user.data['id'],
				} as QuickAuth);

				ctx.session.type = 'none';

				return await ctx.replyWithHTML(
					`<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>\n\n<i>üë®‚ÄçüöÄ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç—É</i>\n\n<i>ü™™ –í–∞—à ID</i>: <b>${user.data['id']}</b>\n\n\n<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - <a href='${process.env.SITE_BASE_URL}/qa/${link.data['id']}'>–ö–ª–∏–∫!</a>\n\n‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç!</b>`,
					Markup.keyboard(
						['–ê–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå', '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üîó'],
						{ columns: 2 },
					),
				);
			}

			if (ctx.session.type === 'delete') {
				if (message === '–ù–µ—Ç üòä') {
					ctx.session.type = 'none';

					await ctx.deleteMessage();

					return await ctx.replyWithHTML(
						'<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏ üòä</b>',
						Markup.keyboard(
							['–ê–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå', '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üîó'],
							{
								columns: 2,
							},
						),
					);
				}

				if (message === '–î–∞ üò¢') {
					ctx.session.type = 'delete-confirm';

					await ctx.deleteMessage();

					return await ctx.replyWithHTML(
						`<i>‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–í–∞—à</b> –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</i>`,
						Markup.removeKeyboard(),
					);
				}
			}

			if (ctx.session.type === 'delete-confirm') {
				const user = await this.firebaseService.getDocByParams('users', {
					key: 'telegram',
					operator: '==',
					value: ctx.from.username,
				});

				if (user.data['password'] !== message) {
					return await ctx.replyWithHTML(
						`<i>‚ùå <b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b></i>`,
					);
				}

				const link = await this.firebaseService.getDocByParams('qa', {
					key: 'to',
					operator: '==',
					value: user.data['id'],
				});

				for (const product of user.data['products']) {
					await this.firebaseService.deleteDoc(`products/${product}`);
				}

				for (const order of user.data['orders']) {
					await this.firebaseService.deleteDoc(`orders/${order}`);
				}

				const del = await this.firebaseService.deleteDoc(
					`users/${user.data['id']}`,
				);

				const delLink =
					link.status === 'success'
						? await this.firebaseService.deleteDoc(`qa/${link.data['id']}`)
						: '';

				await ctx.replyWithHTML(`<i><b>‚úÖ –í–∞—à</b> –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</i>`);

				return await this.botStart(ctx);
			}
		} catch {
			return await ctx.replyWithHTML(
				`<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ‚ùå</b>\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ`,
			);
		}
	}

	async createAccount(@Ctx() ctx: Context): Promise<any> {
		if (ctx.session.type !== 'not_registered') return;

		ctx.session.type = 'registration';

		await ctx.deleteMessage();

		return await ctx.replyWithHTML(
			'<i>–í–≤–µ–¥–∏—Ç–µ <b>–í–∞—à–µ</b> –∏–º—è</i>',
			Markup.removeKeyboard(),
		);
	}

	async sendMessage(to: string | number, message: string): Promise<any> {
		return await this.reSellerBot.telegram.sendMessage(to, message, {
			parse_mode: 'HTML',
		});
	}

	async profileInfo(@Ctx() ctx: Context): Promise<any> {
		if (ctx.session.type !== 'none') return;

		await ctx.deleteMessage();

		const user = await this.firebaseService.getDocByParams('users', {
			key: 'telegram',
			operator: '==',
			value: ctx.from.username,
		});

		if (user.status === 'failure') {
			ctx.session.type = 'not_registered';

			return await ctx.replyWithHTML(
				'<b>‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω!</b>',
				Markup.keyboard(['–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚è≥'], { columns: 2 }),
			);
		}

		let buysLength: number = 0;

		for (const buy of user.data['buys']) {
			buysLength += buy['amount'];
		}

		return await ctx.replyWithHTML(
			`<b>ü™™ ID</b>: ${user.data['id']}\n\n\n<i>‚ÑπÔ∏è –ò–º—è</i>: <b>${
				user.data['name']
			}</b>\n\n<i>üîê –õ–æ–≥–∏–Ω</i>: <b>${
				user.data['login']
			}</b>\n\n<i>üì≤ Telegram ID</i>: <b>${
				user.data['telegramId']
			}</b>\n\n<i>üõçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤</i>: <b>${
				user.data['products'].length
			}</b>\n\n<i>üíµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂</i>: <b>${buysLength}</b>\n\n\n<i>üí∞ –ë–∞–ª–∞–Ω—Å</i>: <b>‚ÇΩ${(
				user.data['balance'] as number
			).toLocaleString('ru-RU', {
				style: 'currency',
				maximumFractionDigits: 2,
			})}</b>`,
		);
	}

	async deleteAccount(@Ctx() ctx: Context): Promise<any> {
		if (ctx.session.type !== 'none') return;

		const user = await this.firebaseService.getDocByParams('users', {
			key: 'telegram',
			operator: '==',
			value: ctx.from.username,
		});

		if (user.status === 'failure') {
			ctx.session.type = 'not_registered';

			return await ctx.replyWithHTML(
				'<b>‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω!</b>',
				Markup.keyboard(['–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚è≥'], { columns: 2 }),
			);
		}

		ctx.session.type = 'delete';

		await ctx.deleteMessage();

		return await ctx.replyWithHTML(
			`<i><b>‚ÑπÔ∏è –í—ã</b> —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–∞—à</b> –∞–∫–∫–∞—É–Ω—Ç\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>‚ÇΩ${(
				user.data['balance'] as number
			).toLocaleString('ru-RU', {
				style: 'currency',
				maximumFractionDigits: 2,
			})}</b></i>`,
			Markup.keyboard(['–î–∞ üò¢', '–ù–µ—Ç üòä'], { columns: 2 }),
		);
	}

	async checkReg(@Ctx() ctx: Context): Promise<any> {
		if (ctx.session.type !== 'not_registered') return;

		const user = await this.firebaseService.getDocByParams('users', {
			key: 'telegram',
			operator: '==',
			value: ctx.from.username,
		});

		if (user.error) {
			return await ctx.replyWithHTML(
				`<i><b>‚ùå –í—ã</b> –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\n<a href='${process.env.SITE_BASE_URL}/registration'>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>\n\n‚ÑπÔ∏è –ï—Å–ª–∏ <b>–í—ã</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ...</i>`,
			);
		}

		return await this.botStart(ctx);
	}

	async getQuickLink(@Ctx() ctx: Context) {
		if (ctx.session.type !== 'none') return;

		const user = await this.firebaseService.getDocByParams('users', {
			key: 'telegram',
			operator: '==',
			value: ctx.from.username,
		});

		if (user.status === 'failure') {
			ctx.session.type = 'not_registered';

			return await ctx.replyWithHTML(
				'<b>‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω!</b>',
				Markup.keyboard(['–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç üë®‚ÄçüöÄ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚è≥'], { columns: 2 }),
			);
		}

		const link = await this.firebaseService.getDocByParams('qa', {
			key: 'to',
			operator: '==',
			value: user.data['id'],
		});

		if (link.status === 'failure') {
			const link = await this.quickAuthService.createAuthLink({
				to: user.data['id'],
			} as QuickAuth);

			return await ctx.replyWithHTML(
				`<i><b>üîó –í–∞—à–∞</b> <a href='${process.env.SITE_BASE_URL}/qa/${link.data['id']}'>–°—Å—ã–ª–∫–∞</a> –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</i>\n\n<b>‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç!</b>`,
			);
		}

		if (link.data['until'] >= new Date().getTime()) {
			const time = Math.round(
				(link.data['until'] - new Date().getTime()) / 1000 / 60,
			);

			return await ctx.replyWithHTML(
				`<i><b>üîó –í–∞—à–∞</b> <a href='${process.env.SITE_BASE_URL}/qa/${
					link.data['id']
				}'>–°—Å—ã–ª–∫–∞</a> –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n<b>‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –µ—â–µ ${
					time > 1 ? time : '~0'
				} ${time >= 5 ? '–º–∏–Ω—É—Ç' : time > 1 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'}</b></i>`,
			);
		}

		const delLink = await this.firebaseService.deleteDoc(
			`qa/${link.data['id']}`,
		);

		const newLink = await this.quickAuthService.createAuthLink({
			to: user.data['id'],
		} as QuickAuth);

		return await ctx.replyWithHTML(
			`<i><b>üîó –í–∞—à–∞</b> <a href='${process.env.SITE_BASE_URL}/qa/${newLink.data['id']}'>–°—Å—ã–ª–∫–∞</a> –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</i>\n\n<b>‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç!</b>`,
		);
	}
}
